Introduction to Terraform
Terraform is an open-source Infrastructure as Code (IaC) tool created by HashiCorp. It allows you to define, provision, and manage infrastructure across various cloud providers using a declarative configuration language (HCL - HashiCorp Configuration Language).

Key Benefits:
Declarative Language: You describe what infrastructure you need, and Terraform builds it for you.
Multi-Cloud Compatibility: Supports providers like AWS, Azure, Google Cloud, and others.
State Management: Keeps track of resources to handle infrastructure changes.
Execution Plans: Provides a preview of changes before applying them.
Terraform Core Concepts
1. Providers
Providers are plugins used to interact with APIs of cloud platforms like AWS, Azure, or GCP.
Each provider has its own set of resources and data sources.
provider "aws" {
  region = "us-east-1"
}
2. Resources
Resources are the main components in your infrastructure, like virtual machines, storage, databases, etc.
resource "aws_instance" "example" {
  ami           = "ami-123456"
  instance_type = "t2.micro"
}
3. Variables
Variables are placeholders for values to make configurations reusable and parameterized.
variable "instance_type" {
  default = "t2.micro"
}
4. Outputs
Outputs are used to display information after a configuration is applied, such as IP addresses or URLs.
output "instance_ip" {
  value = aws_instance.example.public_ip
}
5. State
Terraform uses a state file to keep track of infrastructure resources, enabling incremental updates.
Basic Terraform Workflow
Write Configuration: Create .tf files containing your desired infrastructure in HCL syntax.
Initialize: Run terraform init to initialize the project and download provider plugins.
Plan: Run terraform plan to see what changes Terraform will make to your infrastructure.
Apply: Run terraform apply to execute the plan and provision resources.
Destroy: Run terraform destroy to tear down all infrastructure defined in the configuration.
Terraform Commands
1. terraform init
Initializes the working directory with plugins, modules, and backend setup.
terraform init
2. terraform plan
Shows a preview of what actions Terraform will take when apply is run.
terraform plan
3. terraform apply
Applies the changes required to reach the desired state of the configuration.
terraform apply
4. terraform destroy
Destroys all resources managed by Terraform in the current configuration.
terraform destroy
5. terraform fmt
Formats configuration files for readability and best practices.
terraform fmt
6. terraform validate
Validates the syntax and configuration of the files without deploying anything.
terraform validate
Writing a Basic Terraform Configuration
Define the Provider – Specify which cloud provider you’ll be using.
Create Resources – Define the infrastructure components you want.
Use Variables – Parameterize the configuration for flexibility.
Output Values – Define output values to get useful information.
Example: Deploying an EC2 Instance on AWS
# 1. Define Provider
provider "aws" {
  region = "us-east-1"
}

# 2. Define Variables
variable "instance_type" {
  default = "t2.micro"
}

# 3. Create an EC2 Instance
resource "aws_instance" "example" {
  ami           = "ami-123456"
  instance_type = var.instance_type
  tags = {
    Name = "ExampleInstance"
  }
}

# 4. Output the Public IP of the Instance
output "instance_ip" {
  value = aws_instance.example.public_ip
}
Variables and Outputs
Defining Variables
Variables can be specified in multiple ways:

In-line in .tf files (as shown above).
Using a separate variables.tf file for organization.
Passing values at runtime using terraform apply -var="key=value".
Example variables.tf:
variable "instance_type" {
  default = "t2.micro"
  description = "Type of EC2 instance to deploy"
}
Example terraform.tfvars:
instance_type = "t2.small"
Outputting Data
Outputs allow Terraform to display useful information after apply is run.

Example:
output "instance_id" {
  description = "ID of the EC2 instance"
  value = aws_instance.example.id
}
Modules
Modules are reusable configurations, allowing you to group resources logically and use them as building blocks.

Basic Module Structure
Module Directory: A folder containing .tf files.
Module Call: In your main configuration file, you call the module by referencing its path.
Example Module Structure:
my-module/
├── main.tf
├── variables.tf
├── outputs.tf
Calling a Module:
module "example_module" {
  source = "./my-module"
  instance_type = "t2.micro"
}
Terraform State Management
Terraform maintains a state file (terraform.tfstate) that records the current status of resources.

Remote State
For collaborative projects, store the state file in a remote backend (e.g., AWS S3, Terraform Cloud).

Example configuration for S3 remote state:

terraform {
  backend "s3" {
    bucket = "my-terraform-state"
    key    = "path/to/my/key"
    region = "us-east-1"
  }
}
Provisioners
Provisioners allow you to run scripts on a resource after it is created. They should be used sparingly, mainly for bootstrapping.

Example: Using a Provisioner to Run a Script on EC2

resource "aws_instance" "example" {
  ami           = "ami-123456"
  instance_type = "t2.micro"

  provisioner "remote-exec" {
    inline = [
      "sudo apt-get update",
      "sudo apt-get install -y nginx"
    ]
  }

  connection {
    type     = "ssh"
    user     = "ubuntu"
    private_key = file("~/.ssh/id_rsa")
    host     = self.public_ip
  }
}
Terraform Workspaces
What are Workspaces?
Workspaces are a way to maintain multiple, isolated state files for a single Terraform configuration.
They allow you to manage different environments (like dev, staging, and production) within a single configuration setup.
By default, every Terraform configuration has a single workspace named default.
Why Use Workspaces?
Workspaces are useful for managing different environments without creating separate directories or configurations.
They keep the state for each environment separate, which is helpful when deploying similar infrastructure with slight differences (like instance sizes or numbers).
Common Commands for Workspaces
Create a New Workspace


terraform workspace new <workspace_name>
Example:
terraform workspace new dev
Switch Between Workspaces

terraform workspace select <workspace_name>
Example:

terraform workspace select prod
List All Workspaces
terraform workspace list
Show the Current Workspace
terraform workspace show
Delete a Workspace

You can delete a workspace, but only if it is not in use.
terraform workspace delete <workspace_name>
Example Usage of Workspaces
Imagine you have a single Terraform configuration for an EC2 instance and want different setups for dev, staging, and prod environments.

Define environment-specific variables by using the workspace name as a variable. For instance, use terraform.workspace in variable settings.

Use a different workspace for each environment:

variable "instance_type" {
  type = string
  default = terraform.workspace == "prod" ? "t2.large" : "t2.micro"
}
With this, when you switch workspaces, Terraform automatically applies the configurations based on the active workspace.

Terraform Taint
What is Terraform Taint?
Taint is a command that marks a specific resource for recreation.
By marking a resource as tainted, you tell Terraform to destroy and recreate that resource during the next apply operation.
Useful for cases where a resource is malfunctioning or you want to force an update without changing the configuration file.
Why Use Terraform Taint?
When you have a resource that’s problematic, such as a misconfigured or corrupted resource, and you want to replace it without making configuration changes.
Useful for testing to see if recreating a resource would solve issues.
Commands for Taint and Untaint
Mark a Resource as Tainted

terraform taint <resource_type.resource_name>
Example:

terraform taint aws_instance.example
Remove the Taint on a Resource

If you want to remove the taint marking before applying, you can use untaint.

terraform untaint <resource_type.resource_name>
Example:

terraform untaint aws_instance.example
Apply Changes to Recreate the Tainted Resource

After marking a resource as tainted, run:
terraform apply
